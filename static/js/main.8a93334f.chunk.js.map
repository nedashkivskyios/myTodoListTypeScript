{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","todoTitle","setTodoTitle","error","setError","className","value","onChange","e","currentTarget","onClick","trim","length","callback","EditableSpan","editMode","setEditMode","title","text","setText","onBlur","type","autoFocus","onDoubleClick","ToDoList","changeTodolistTitle","removeTodolist","todolistID","addTask","task","map","el","isDone","removeTask","id","newStatusValue","checked","changeStatus","changeTaskTitle","filter","changeFilter","todoListIDOne","v1","todoListIDTwo","App","todolist","setTodolist","tasks","setTasks","todo","find","tl","taskId","newTodolist","findTask","taskID","ourTask","t","newTodolistID","filteringTasks","newTask","TL","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8a93334f.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\n\ntype PropsType = {\n  callback: ( title: string) => void\n\n}\n\n\nexport const AddItemForm: React.FC<PropsType> = (props) => {\n  const [todoTitle, setTodoTitle] = useState<string>('')\n  let [error, setError] = useState<string | null>(null)\n  const todoTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTodoTitle(e.currentTarget.value)\n    setError(null)\n  }\n  const callbackHandler = () => {\n    if (todoTitle.trim().length === 0) {\n      setError('Title is required')\n    } else {\n    props.callback(todoTitle)\n    setTodoTitle('')\n  }}\n  return (\n    <div>\n      <input className={error ? 'errorInput' : ''} value={todoTitle} onChange={todoTitleHandler}/>\n      <button onClick={callbackHandler}>+</button>\n      <div className={'error'}>\n        {error ? error : ''}\n      </div>\n    </div>\n  );\n};","import React, {ChangeEvent, useState} from 'react';\n\ntype PropsType = {\n  title: string\n  onChange: (title: string) => void\n}\n\nexport const EditableSpan: React.FC<PropsType> = (props) => {\n  const [editMode, setEditMode] = useState<boolean>(false)\n  const [text, setText] = useState<string>(props.title)\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setText(e.currentTarget.value)\n  }\n  const onBlurHandler = () => {\n    props.onChange(text)\n    setEditMode(false)\n  }\n  const onDoubleClickHandler = () => {\n    setEditMode(true)\n  }\n  if (editMode) {\n    return (\n      <input onChange={onChangeHandler}\n             value={text}\n             onBlur={onBlurHandler}\n             type=\"text\"\n             autoFocus\n      />\n    )\n  } else {\n    return (\n      <span onDoubleClick={onDoubleClickHandler}>{props.title}</span>\n    )\n  }\n};\n\n","import React, {ChangeEvent} from \"react\";\nimport {FilterType} from \"./App\";\nimport {AddItemForm} from \"./components/AddItemForm\";\nimport {EditableSpan} from \"./components/EditableSpan\";\n\nexport type TasksPropsType = {\n  id: string,\n  title: string,\n  isDone: boolean\n}\nexport type ToDoListPropsType = {\n  title: string\n  todolistID: string\n  filter: FilterType\n  task: Array<TasksPropsType>\n  removeTodolist: (todolistID: string) => void\n  addTask: (title: string) => void\n  removeTask: (todolistID: string, taskId: string) => void\n  changeFilter: (value: FilterType, todolistID: string) => void\n  changeStatus: (todolistID: string, id: string, checked: boolean) => void\n  changeTodolistTitle: (title: string) => void\n  changeTaskTitle: (todolistID: string, title: string, taskID: string) => void\n}\n\nconst ToDoList = (props: ToDoListPropsType) => {\n\n\n  const changeTodolistTitle = (title: string) => {\n    props.changeTodolistTitle( title)\n  }\n\n  const removeTodolistHandler = () => {\n    props.removeTodolist(props.todolistID)\n  }\n  const allButtonHandler = () => {\n    props.changeFilter( 'all', props.todolistID)\n  }\n  const activeButtonHandler = () => {\n    props.changeFilter( 'notdone', props.todolistID)\n  }\n  const completedButtonHandler = () => {\n    props.changeFilter( 'done', props.todolistID)\n  }\n  return (\n    <div className=\"ToDoList\">\n      <div>\n        <EditableSpan onChange={changeTodolistTitle} title={props.title}/>\n      <button onClick={removeTodolistHandler}>x</button>\n      </div>\n      <div>\n        <AddItemForm callback={props.addTask} />\n      </div>\n      <ul>\n        {\n          props.task.map(el => {\n\n            const onChangeTaskTitleHandler = (title: string) => {\n              props.changeTaskTitle(props.todolistID, title, el.id)\n            }\n\n\n            const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\n              const newStatusValue = e.currentTarget.checked\n              props.changeStatus(props.todolistID, el.id, newStatusValue)\n            }\n            const removeTaskHandler = () => {\n              props.removeTask(props.todolistID, el.id)\n            }\n\n            return <li className={el.isDone ? 'isDone' : ''} key={el.id}>\n              <button onClick={removeTaskHandler}>\n                x\n              </button>\n              <input onChange={changeStatusHandler} type=\"checkbox\" checked={el.isDone}/>\n              <EditableSpan title={el.title} onChange={onChangeTaskTitleHandler} />\n            </li>\n          })\n        }\n      </ul>\n      <div>\n        <button className={props.filter === 'all' ? 'activeButton' : ''} onClick={allButtonHandler}>All</button>\n        <button className={props.filter === 'notdone' ? 'activeButton' : ''} onClick={activeButtonHandler}>Active\n        </button>\n        <button className={props.filter === 'done' ? 'activeButton' : ''} onClick={completedButtonHandler}>Completed\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default ToDoList;\n","import React, {useState} from 'react';\r\nimport {v1} from 'uuid';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\nexport type FilterType = 'all' | 'done' | 'notdone'\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\nexport type TodoListType = {\r\n  id: string,\r\n  title: string,\r\n  filter: FilterType\r\n}\r\nexport type TasksType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\nconst todoListIDOne = v1()\r\nconst todoListIDTwo = v1()\r\n\r\nfunction App() {\r\n\r\n  let [todolist, setTodolist] = useState<Array<TodoListType>>([\r\n    {\r\n      id: todoListIDOne,\r\n      title: 'What to learn',\r\n      filter: 'all'\r\n    },\r\n    {\r\n      id: todoListIDTwo,\r\n      title: 'What to buy',\r\n      filter: 'all'\r\n    },\r\n  ])\r\n  let [tasks, setTasks] = useState<TasksType>({\r\n    [todoListIDOne]: [\r\n      {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n      {id: v1(), title: \"JS\", isDone: true},\r\n      {id: v1(), title: \"React\", isDone: false},\r\n      {id: v1(), title: \"rest api\", isDone: false},\r\n      {id: v1(), title: \"graphQL\", isDone: false}\r\n    ],\r\n    [todoListIDTwo]: [\r\n      {id: v1(), title: \"Beer\", isDone: false},\r\n      {id: v1(), title: \"Milk\", isDone: false},\r\n      {id: v1(), title: \"Bread\", isDone: false}\r\n    ],\r\n  })\r\n\r\n\r\n  const changeFilter = (value: FilterType, todolistID: string) => {\r\n    const todo = todolist.find(tl => tl.id === todolistID)\r\n    if (todo) {\r\n      todo.filter = value\r\n      setTodolist([...todolist])\r\n    }\r\n  }\r\n  const removeTask = (todolistID: string, taskId: string) => {\r\n    const task = tasks[todolistID]\r\n    tasks[todolistID] = task.filter(el => el.id !== taskId)\r\n    setTasks({...tasks})\r\n  }\r\n  const removeTodolist = (todolistID: string) => {\r\n    const newTodolist = todolist.filter(tl => tl.id !== todolistID)\r\n    setTodolist(newTodolist)\r\n    delete tasks[todolistID]\r\n  }\r\n  const addTodolist = (title: string) => {\r\n    const newTodolistID = v1()\r\n    const newTodolist = {\r\n      id: newTodolistID,\r\n      title: title,\r\n      filter: 'all' as FilterType\r\n    }\r\n    setTodolist([newTodolist, ...todolist])\r\n    tasks[newTodolistID] = []\r\n\r\n  }\r\n  const changeStatus = (todolistID: string, id: string, checked: boolean) => {\r\n    const task = tasks[todolistID]\r\n    const findTask = task.find(el => el.id === id)\r\n    if (findTask) {\r\n      findTask.isDone = checked\r\n    }\r\n    setTasks({...tasks})\r\n  }\r\n\r\n  const changeTaskTitle = (todolistID: string, title: string, taskID: string) => {\r\n    let ourTodolistTasks = tasks[todolistID]\r\n    let ourTask = ourTodolistTasks.find(t => t.id === taskID)\r\n    if (ourTask) {\r\n      ourTask.title = title\r\n    }\r\n    setTasks({...tasks})\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AddItemForm\r\n        callback={addTodolist}\r\n      />\r\n      {\r\n        todolist.map(tl => {\r\n          let filteringTasks = tasks[tl.id]\r\n          if (tl.filter === 'done') {\r\n            filteringTasks = filteringTasks.filter(el => el.isDone)\r\n          }\r\n          if (tl.filter === 'notdone') {\r\n            filteringTasks = filteringTasks.filter(el => !el.isDone)\r\n          }\r\n          const changeTodolistTitle = (title: string) => {\r\n            let TL = todolist.find(el => el.id === tl.id)\r\n            if (TL) {\r\n              TL.title = title\r\n            }\r\n            setTodolist([...todolist])\r\n          }\r\n\r\n          const addTask = (title: string) => {\r\n            const task = tasks[tl.id]\r\n            let newTask = {id: v1(), title: title, isDone: false}\r\n            tasks[tl.id] = [...task, newTask]\r\n            setTasks({...tasks})\r\n          }\r\n          return <ToDoList key={tl.id}\r\n                           todolistID={tl.id}\r\n                           title={tl.title}\r\n                           filter={tl.filter}\r\n                           task={filteringTasks}\r\n                           addTask={addTask}\r\n                           changeStatus={changeStatus}\r\n                           removeTask={removeTask}\r\n                           changeFilter={changeFilter}\r\n                           removeTodolist={removeTodolist}\r\n                           changeTodolistTitle={changeTodolistTitle}\r\n                           changeTaskTitle={changeTaskTitle}\r\n          />\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}