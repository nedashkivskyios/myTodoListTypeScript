{"version":3,"sources":["ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ToDoList","props","useState","todoTitle","setTodoTitle","className","title","onClick","removeTodolist","todolistID","error","value","onChange","e","currentTarget","setError","addTask","task","map","el","isDone","removeTask","id","newStatusValue","checked","changeStatus","type","filter","changeFilter","todoListIDOne","v1","todoListIDTwo","App","todolist","setTodolist","tasks","setTasks","todo","find","tl","taskId","newTodolist","trim","length","newTask","findTask","filteringTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.112d841f.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\nimport {FilterType} from \"./App\";\n\nexport type TasksPropsType = {\n  id: string,\n  title: string,\n  isDone: boolean\n}\nexport type ToDoListPropsType = {\n  title: string\n  todolistID: string\n  filter: FilterType\n  error: string | null\n  task: Array<TasksPropsType>\n  setError: (setError: string | null) => void\n  removeTodolist: (todolistID: string) => void\n  addTask: (todolistID: string, title: string) => void\n  removeTask: (todolistID: string, taskId: string) => void\n  changeFilter: (value: FilterType, todolistID: string) => void\n  changeStatus: (todolistID: string, id: string, checked: boolean) => void\n}\n\nconst ToDoList = (props: ToDoListPropsType) => {\n\n  const [todoTitle, setTodoTitle] = useState<string>('')\n\n\n  const todoTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTodoTitle(e.currentTarget.value)\n    props.setError(null)\n  }\n  const addTaskButtonHandler = () => {\n    props.addTask(props.todolistID, todoTitle)\n    setTodoTitle('')\n  }\n  const removeTodolistHandler = () => {\n    props.removeTodolist(props.todolistID)\n  }\n  const allButtonHandler = () => {\n    props.changeFilter( 'all', props.todolistID)\n  }\n  const activeButtonHandler = () => {\n    props.changeFilter( 'notdone', props.todolistID)\n  }\n  const completedButtonHandler = () => {\n    props.changeFilter( 'done', props.todolistID)\n  }\n  return (\n    <div className=\"ToDoList\">\n      <div>\n        <h3>{props.title}</h3>\n      <button onClick={removeTodolistHandler}>x</button>\n      </div>\n      <div>\n        <input className={props.error ? 'errorInput' : ''} value={todoTitle} onChange={todoTitleHandler}/>\n        <button onClick={addTaskButtonHandler}>+</button>\n        <div className={'error'}>\n          {props.error ? props.error : ''}\n        </div>\n      </div>\n      <ul>\n        {\n          props.task.map(el => {\n\n            const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\n              const newStatusValue = e.currentTarget.checked\n              props.changeStatus(props.todolistID, el.id, newStatusValue)\n            }\n            const removeTaskHandler = () => {\n              props.removeTask(props.todolistID, el.id)\n            }\n\n            return <li className={el.isDone ? 'isDone' : ''} key={el.id}>\n              <button onClick={removeTaskHandler}>\n                x\n              </button>\n              <input onChange={changeStatusHandler} type=\"checkbox\" checked={el.isDone}/>\n              <span>{el.title}</span>\n            </li>\n          })\n        }\n      </ul>\n      <div>\n        <button className={props.filter === 'all' ? 'activeButton' : ''} onClick={allButtonHandler}>All</button>\n        <button className={props.filter === 'notdone' ? 'activeButton' : ''} onClick={activeButtonHandler}>Active\n        </button>\n        <button className={props.filter === 'done' ? 'activeButton' : ''} onClick={completedButtonHandler}>Completed\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default ToDoList;\n","import React, {useState} from 'react';\r\nimport {v1} from 'uuid';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\";\r\n\r\nexport type FilterType = 'all' | 'done' | 'notdone'\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\nexport type TodoListType = {\r\n  id: string,\r\n  title: string,\r\n  filter: FilterType\r\n}\r\nexport type TasksType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\nconst todoListIDOne = v1()\r\nconst todoListIDTwo = v1()\r\n\r\nfunction App() {\r\n\r\n  let [todolist, setTodolist] = useState<Array<TodoListType>>([\r\n    {\r\n      id: todoListIDOne,\r\n      title: 'What to learn',\r\n      filter: 'all'\r\n    },\r\n    {\r\n      id: todoListIDTwo,\r\n      title: 'What to buy',\r\n      filter: 'all'\r\n    },\r\n  ])\r\n\r\n\r\n  let [tasks, setTasks] = useState<TasksType>({\r\n    [todoListIDOne]: [\r\n      {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n      {id: v1(), title: \"JS\", isDone: true},\r\n      {id: v1(), title: \"React\", isDone: false},\r\n      {id: v1(), title: \"rest api\", isDone: false},\r\n      {id: v1(), title: \"graphQL\", isDone: false}\r\n    ],\r\n    [todoListIDTwo]: [\r\n      {id: v1(), title: \"Beer\", isDone: false},\r\n      {id: v1(), title: \"Milk\", isDone: false},\r\n      {id: v1(), title: \"Bread\", isDone: false}\r\n    ],\r\n  })\r\n  let [error, setError] = useState<string | null>(null)\r\n\r\n  const changeFilter = (value: FilterType, todolistID: string) => {\r\n    const todo = todolist.find(tl => tl.id === todolistID)\r\n    if (todo) {\r\n      todo.filter = value\r\n      setTodolist([...todolist])\r\n    }\r\n  }\r\n\r\n  const removeTask = (todolistID: string, taskId: string) => {\r\n    const task = tasks[todolistID]\r\n    tasks[todolistID] = task.filter(el => el.id !== taskId)\r\n    setTasks({...tasks})\r\n    }\r\nconst removeTodolist = (todolistID: string) => {\r\n  const newTodolist = todolist.filter(tl => tl.id !== todolistID)\r\n  setTodolist(newTodolist)\r\n  delete tasks[todolistID]\r\n}\r\n  const addTask = (todolistID: string, title: string) => {\r\n  const task = tasks[todolistID]\r\n    if (title.trim().length === 0) {\r\n      setError('Title is required')\r\n    } else {\r\n      let newTask = {id: v1(), title: title, isDone: false}\r\n      tasks[todolistID] = [...task, newTask]\r\n      setTasks({...tasks})\r\n    }\r\n  }\r\n  const changeStatus = (todolistID: string, id: string, checked: boolean) => {\r\n    const task = tasks[todolistID]\r\n    const findTask = task.find(el => el.id === id)\r\n    if (findTask) {\r\n      findTask.isDone = checked\r\n    }\r\n    setTasks({...tasks})\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        todolist.map(tl => {\r\n          let filteringTasks = tasks[tl.id]\r\n          if (tl.filter === 'done') {\r\n            filteringTasks = filteringTasks.filter(el => el.isDone)\r\n          }\r\n          if (tl.filter === 'notdone') {\r\n            filteringTasks = filteringTasks.filter(el => !el.isDone)\r\n          }\r\n          return <ToDoList key={tl.id}\r\n                           removeTodolist={removeTodolist}\r\n                           todolistID={tl.id}\r\n                           addTask={addTask}\r\n                           title={tl.title}\r\n                           error={error}\r\n                           task={filteringTasks}\r\n                           changeStatus={changeStatus}\r\n                           removeTask={removeTask}\r\n                           changeFilter={changeFilter}\r\n                           setError={setError}\r\n                           filter={tl.filter}\r\n          />\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}