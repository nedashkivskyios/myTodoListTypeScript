{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","todoTitle","setTodoTitle","error","setError","TextField","variant","className","value","onChange","e","currentTarget","label","helperText","onKeyPress","trim","length","ctrlKey","charCode","callback","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","title","text","setText","onBlur","type","autoFocus","onDoubleClick","ToDoList","changeTodolistTitle","removeTodolist","todolistID","Delete","addTask","task","map","el","isDone","Checkbox","newStatusValue","checked","changeStatus","id","changeTaskTitle","removeTask","Button","filter","changeFilter","todoListIDOne","v1","todoListIDTwo","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","App","classes","todolist","setTodolist","tasks","setTasks","todo","find","tl","taskId","newTodolist","findTask","taskID","ourTask","t","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","Grid","container","style","padding","newTodolistID","filteringTasks","item","Paper","newTask","TL","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6e60c4e7.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype PropsType = {\n  callback: (title: string) => void\n\n}\n\n\nexport const AddItemForm: React.FC<PropsType> = (props) => {\n  const [todoTitle, setTodoTitle] = useState<string>('')\n  let [error, setError] = useState<string | null>(null)\n  const todoTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTodoTitle(e.currentTarget.value)\n    setError(null)\n  }\n  const callbackHandler = () => {\n    if (todoTitle.trim().length === 0) {\n      setError('Title is required')\n    } else {\n      props.callback(todoTitle)\n      setTodoTitle('')\n    }\n  }\n  return (\n    <div>\n      <TextField\n        error={!!error}\n        variant={'outlined'}\n        className={error ? 'errorInput' : ''}\n        value={todoTitle}\n        onChange={todoTitleHandler}\n        label={'Title'}\n        helperText={error}\n        onKeyPress={(e) => {\n          if (todoTitle.trim().length === 0) {\n            setError('Title is required')\n          } else {\n            if (e.ctrlKey && e.charCode === 13) {\n              props.callback(todoTitle)\n              setTodoTitle('')\n            }\n          }\n        }}\n      />\n      <IconButton onClick={callbackHandler} color={'primary'}>\n        <AddBox/>\n      </IconButton>\n    </div>\n  );\n};","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ntype PropsType = {\n  title: string\n  onChange: (title: string) => void\n}\n\nexport const EditableSpan: React.FC<PropsType> = (props) => {\n  const [editMode, setEditMode] = useState<boolean>(false)\n  const [text, setText] = useState<string>(props.title)\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setText(e.currentTarget.value)\n  }\n  const onBlurHandler = () => {\n    props.onChange(text)\n    setEditMode(false)\n  }\n  const onDoubleClickHandler = () => {\n    setEditMode(true)\n  }\n  if (editMode) {\n    return (\n      <TextField variant={'outlined'}\n                 onChange={onChangeHandler}\n                 value={text}\n                 onBlur={onBlurHandler}\n                 type=\"text\"\n                 autoFocus\n                 onKeyPress={(e) => {\n                   if (e.ctrlKey && e.charCode === 13) {\n                     props.onChange(text)\n                     setEditMode(false)\n                   }\n                 }}\n      />\n    )\n  } else {\n    return (\n      <span onDoubleClick={onDoubleClickHandler}>{props.title}</span>\n    )\n  }\n};\n\n","import React, {ChangeEvent} from \"react\";\nimport {FilterType} from \"./App\";\nimport {AddItemForm} from \"./components/AddItemForm\";\nimport {EditableSpan} from \"./components/EditableSpan\";\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\nexport type TasksPropsType = {\n  id: string,\n  title: string,\n  isDone: boolean\n}\nexport type ToDoListPropsType = {\n  title: string\n  todolistID: string\n  filter: FilterType\n  task: Array<TasksPropsType>\n  removeTodolist: (todolistID: string) => void\n  addTask: (title: string) => void\n  removeTask: (todolistID: string, taskId: string) => void\n  changeFilter: (value: FilterType, todolistID: string) => void\n  changeStatus: (todolistID: string, id: string, checked: boolean) => void\n  changeTodolistTitle: (title: string) => void\n  changeTaskTitle: (todolistID: string, title: string, taskID: string) => void\n}\n\nconst ToDoList = (props: ToDoListPropsType) => {\n\n\n  const changeTodolistTitle = (title: string) => {\n    props.changeTodolistTitle(title)\n  }\n\n  const removeTodolistHandler = () => {\n    props.removeTodolist(props.todolistID)\n  }\n  const allButtonHandler = () => {\n    props.changeFilter('all', props.todolistID)\n  }\n  const activeButtonHandler = () => {\n    props.changeFilter('notdone', props.todolistID)\n  }\n  const completedButtonHandler = () => {\n    props.changeFilter('done', props.todolistID)\n  }\n  return (\n    <div className=\"ToDoList\">\n      <div>\n        <EditableSpan onChange={changeTodolistTitle} title={props.title}/>\n        <IconButton onClick={removeTodolistHandler}>\n          <Delete/>\n        </IconButton>\n      </div>\n      <div>\n        <AddItemForm callback={props.addTask}/>\n      </div>\n      <div>\n        {\n          props.task.map(el => {\n            const onChangeTaskTitleHandler = (title: string) => {\n              props.changeTaskTitle(props.todolistID, title, el.id)\n            }\n            const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\n              const newStatusValue = e.currentTarget.checked\n              props.changeStatus(props.todolistID, el.id, newStatusValue)\n            }\n            const removeTaskHandler = () => {\n              props.removeTask(props.todolistID, el.id)\n            }\n\n            return <div className={el.isDone ? 'isDone' : ''} key={el.id}>\n              <Checkbox onChange={changeStatusHandler} checked={el.isDone}/>\n              <EditableSpan title={el.title} onChange={onChangeTaskTitleHandler}/>\n              <IconButton onClick={removeTaskHandler}>\n                <Delete/>\n              </IconButton>\n            </div>\n          })\n        }\n      </div>\n      <div>\n        <Button\n          variant={props.filter === 'all' ? 'outlined' : 'text'}\n          onClick={allButtonHandler}\n        >\n          All\n        </Button>\n        <Button\n          color={'primary'}\n          variant={props.filter === 'notdone' ? 'outlined' : 'text'}\n          onClick={activeButtonHandler}\n        >\n          Active\n        </Button>\n        <Button\n          color={'secondary'}\n          variant={props.filter === 'done' ? 'outlined' : 'text'}\n          onClick={completedButtonHandler}\n        >\n          Completed\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default ToDoList;\n","import React, {useState} from 'react';\r\nimport {v1} from 'uuid';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {Container, Grid, Paper} from \"@material-ui/core\";\r\n\r\nexport type FilterType = 'all' | 'done' | 'notdone'\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\nexport type TodoListType = {\r\n  id: string,\r\n  title: string,\r\n  filter: FilterType\r\n}\r\nexport type TasksType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\nconst todoListIDOne = v1()\r\nconst todoListIDTwo = v1()\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}))\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  let [todolist, setTodolist] = useState<Array<TodoListType>>([\r\n    {\r\n      id: todoListIDOne,\r\n      title: 'What to learn',\r\n      filter: 'all'\r\n    },\r\n    {\r\n      id: todoListIDTwo,\r\n      title: 'What to buy',\r\n      filter: 'all'\r\n    },\r\n  ])\r\n  let [tasks, setTasks] = useState<TasksType>({\r\n    [todoListIDOne]: [\r\n      {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n      {id: v1(), title: \"JS\", isDone: true},\r\n      {id: v1(), title: \"React\", isDone: false},\r\n      {id: v1(), title: \"rest api\", isDone: false},\r\n      {id: v1(), title: \"graphQL\", isDone: false}\r\n    ],\r\n    [todoListIDTwo]: [\r\n      {id: v1(), title: \"Beer\", isDone: false},\r\n      {id: v1(), title: \"Milk\", isDone: false},\r\n      {id: v1(), title: \"Bread\", isDone: false}\r\n    ],\r\n  })\r\n\r\n\r\n  const changeFilter = (value: FilterType, todolistID: string) => {\r\n    const todo = todolist.find(tl => tl.id === todolistID)\r\n    if (todo) {\r\n      todo.filter = value\r\n      setTodolist([...todolist])\r\n    }\r\n  }\r\n  const removeTask = (todolistID: string, taskId: string) => {\r\n    const task = tasks[todolistID]\r\n    tasks[todolistID] = task.filter(el => el.id !== taskId)\r\n    setTasks({...tasks})\r\n  }\r\n  const removeTodolist = (todolistID: string) => {\r\n    const newTodolist = todolist.filter(tl => tl.id !== todolistID)\r\n    setTodolist(newTodolist)\r\n    delete tasks[todolistID]\r\n  }\r\n  const addTodolist = (title: string) => {\r\n    const newTodolistID = v1()\r\n    const newTodolist = {\r\n      id: newTodolistID,\r\n      title: title,\r\n      filter: 'all' as FilterType\r\n    }\r\n    setTodolist([newTodolist, ...todolist])\r\n    tasks[newTodolistID] = []\r\n\r\n  }\r\n  const changeStatus = (todolistID: string, id: string, checked: boolean) => {\r\n    const task = tasks[todolistID]\r\n    const findTask = task.find(el => el.id === id)\r\n    if (findTask) {\r\n      findTask.isDone = checked\r\n    }\r\n    setTasks({...tasks})\r\n  }\r\n  const changeTaskTitle = (todolistID: string, title: string, taskID: string) => {\r\n    let ourTodolistTasks = tasks[todolistID]\r\n    let ourTask = ourTodolistTasks.find(t => t.id === taskID)\r\n    if (ourTask) {\r\n      ourTask.title = title\r\n    }\r\n    setTasks({...tasks})\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            News\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Grid container style={{padding: '30px'}}>\r\n          <AddItemForm\r\n            callback={addTodolist}\r\n          />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          {\r\n            todolist.map(tl => {\r\n              let filteringTasks = tasks[tl.id]\r\n              if (tl.filter === 'done') {\r\n                filteringTasks = filteringTasks.filter(el => el.isDone)\r\n              }\r\n              if (tl.filter === 'notdone') {\r\n                filteringTasks = filteringTasks.filter(el => !el.isDone)\r\n              }\r\n              const changeTodolistTitle = (title: string) => {\r\n                let TL = todolist.find(el => el.id === tl.id)\r\n                if (TL) {\r\n                  TL.title = title\r\n                }\r\n                setTodolist([...todolist])\r\n              }\r\n\r\n              const addTask = (title: string) => {\r\n                const task = tasks[tl.id]\r\n                let newTask = {id: v1(), title: title, isDone: false}\r\n                tasks[tl.id] = [...task, newTask]\r\n                setTasks({...tasks})\r\n              }\r\n              return (\r\n                <Grid item key={tl.id}>\r\n                  <Paper style={{padding: '20px'}}>\r\n                    <ToDoList key={tl.id}\r\n                              todolistID={tl.id}\r\n                              title={tl.title}\r\n                              filter={tl.filter}\r\n                              task={filteringTasks}\r\n                              addTask={addTask}\r\n                              changeStatus={changeStatus}\r\n                              removeTask={removeTask}\r\n                              changeFilter={changeFilter}\r\n                              removeTodolist={removeTodolist}\r\n                              changeTodolistTitle={changeTodolistTitle}\r\n                              changeTaskTitle={changeTaskTitle}\r\n                    />\r\n                  </Paper>\r\n                </Grid>)\r\n            })\r\n          }\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}